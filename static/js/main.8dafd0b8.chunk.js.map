{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","todos","props","filterByText","filterByStatus","filterTodos","text","status","setState","Error","filter","todo","completed","title","includes","randomList","sort","Math","random","this","setSelectedUserId","selectedUserId","className","type","value","placeholder","onChange","event","target","onClick","map","classNames","disabled","checked","readOnly","userId","id","React","Component","getTodos","a","fetch","response","json","getUser","CurrentUser","currentUser","resetUserId","reloadUser","user","name","email","App","currentId","list","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8dafd0b8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos :Todo[];\n  setSelectedUserId: (id:number)=>void;\n  selectedUserId: number;\n};\n\ntype State = {\n  todos: Todo[];\n  filterByText: string;\n  filterByStatus: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    todos: this.props.todos,\n    filterByText: '',\n    filterByStatus: 'All',\n  };\n\n  filterTodos = (text:string | null, status:string | null) => {\n    if (status === null && text !== null) {\n      this.setState({\n        filterByText: text,\n      });\n    }\n\n    if (text === null) {\n      switch (status) {\n        case ('All'):\n          this.setState({\n            filterByStatus: 'All',\n          });\n          break;\n        case ('Completed'):\n          this.setState({\n            filterByStatus: 'Completed',\n          });\n          break;\n        case ('In Progress'):\n          this.setState({\n            filterByStatus: 'In Progress',\n          });\n          break;\n        default:\n          throw new Error('wrong task status');\n      }\n    }\n\n    this.setState(\n      state => {\n        return ({\n          todos: this.props.todos.filter(\n            (todo) => {\n              switch (state.filterByStatus) {\n                case ('All'):\n                  return true;\n                case ('Completed'):\n                  return todo.completed;\n                case ('In Progress'):\n                  return !todo.completed;\n                default:\n                  throw new Error('wrong task status');\n              }\n            },\n          ).filter(\n            todo => todo.title.includes(state.filterByText),\n          ),\n        });\n      },\n    );\n  };\n\n  randomList = () => {\n    this.setState(\n      state => ({\n        todos: [...state.todos].sort(() => (Math.random() - 0.5)),\n      }),\n    );\n  };\n\n  render() {\n    const { setSelectedUserId, selectedUserId } = this.props;\n    const { todos, filterByText } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"ButtonBlock\">\n          <input\n            type=\"text\"\n            className=\"TittleFilterInput\"\n            value={filterByText}\n            placeholder=\"Filter list by title\"\n            onChange={(event) => this.filterTodos(event.target.value, null)}\n          />\n          <button\n            type=\"button\"\n            className=\"RandomListButton\"\n            onClick={() => this.randomList()}\n          >\n            Randomize\n          </button>\n          <select\n            className=\"TaskStatusSelect\"\n            onChange={(event) => this.filterTodos(null, event.target.value)}\n          >\n            <option value=\"All\" className=\"SelectAll\">All</option>\n            <option value=\"Completed\" className=\"SelectCompleted\">Completed</option>\n            <option value=\"In Progress\" className=\"SelectProgress\">In Progress</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" disabled checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', {\n                    'TodoList__user-button--unselected button': !(todo.userId === selectedUserId),\n                    'TodoList__user-button--selected button': todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => setSelectedUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_TODOS_URL = 'https://mate.academy/students-api/todos';\nconst API_USERS_URL = 'https://mate.academy/students-api/users/';\n\nexport const getTodos = async ():Promise<Todo[]> => {\n  const response = await fetch(API_TODOS_URL);\n\n  return response.json();\n};\n\nexport const getUser = async (userId:number) => {\n  const response = await fetch(`${API_USERS_URL}${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number;\n  setSelectedUserId:(id:number)=>void;\n};\n\ntype State = {\n  currentUser: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    currentUser: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser();\n  }\n\n  async componentDidUpdate() {\n    if (this.props.selectedUserId !== this.state.currentUser?.id) {\n      this.reloadUser();\n    }\n  }\n\n  resetUserId = () => {\n    this.props.setSelectedUserId(0);\n  };\n\n  async reloadUser() {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ currentUser: user });\n  }\n\n  render() {\n    const { currentUser } = this.state;\n\n    if (!currentUser) {\n      return <div>User not found</div>;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {this.props.selectedUserId}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n        <p className=\"CurrentUser__email\">{currentUser.email}</p>\n        <p className=\"CurrentUser__phone\">213</p>\n        <button\n          className=\"ResetList\"\n          type=\"button\"\n          onClick={() => this.resetUserId()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const list = await getTodos();\n\n    this.setState({\n      todos: list,\n    });\n  }\n\n  setSelectedUserId = async (currentId:number) => {\n    await this.setState({\n      selectedUserId: currentId,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0\n          && (\n            <TodoList\n              todos={todos}\n              setSelectedUserId={this.setSelectedUserId}\n              selectedUserId={selectedUserId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                setSelectedUserId={this.setSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}